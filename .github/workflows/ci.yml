# NB: This workflow does not follow best practices.
#     This is intentional, to simplify things for a presentation.
name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/secure-todo:build-${{ github.run_id }}
  CACHE_IN: "type=gha"
  CACHE_OUT: "type=gha,mode=max"

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        uses: docker/build-push-action@v5
        with:
          target: frankenphp_prod
          tags: ${{ env.IMAGE_NAME }}
          cache-from: ${{ env.CACHE_IN }}
          cache-to: ${{env.CACHE_OUT }}
          outputs: type=docker,dest=/tmp/untested-container.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: untested-container
          path: /tmp/untested-container.tar

  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: untested-container
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/untested-container.tar
          docker image ls -a
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start services
        run: docker compose up --wait --no-build
      - name: Create test database and schema
        run: docker compose exec -T php bin/console doctrine:schema:update --force
      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost

  release:
    name: Release Application
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    permissions: write-all
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: untested-container
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/untested-container.tar
